// ğŸ“¦ Package imports:
import 'package:shared_preferences/shared_preferences.dart';

/// Uma classe para gerenciar preferÃªncias compartilhadas.
///
/// A classe [SharedPref] fornece mÃ©todos para ler, salvar, remover
/// e limpar dados armazenados nas preferÃªncias compartilhadas. Isso
/// Ã© Ãºtil para persistir informaÃ§Ãµes entre sessÃµes de aplicativo,
/// como tokens de autenticaÃ§Ã£o e configuraÃ§Ãµes do usuÃ¡rio.
///
/// ## MÃ©todos:
///
/// ### read
/// LÃª um valor armazenado nas preferÃªncias compartilhadas.
///
/// - **ParÃ¢metros:**
///   - [key]: A chave do valor a ser lido.
///
/// - **Retorno:**
///   Retorna uma `Future<String?>` que contÃ©m o valor associado Ã 
///   chave, ou `null` se a chave nÃ£o existir.
///
/// ### remove
/// Remove um valor armazenado nas preferÃªncias compartilhadas.
///
/// - **ParÃ¢metros:**
///   - [key]: A chave do valor a ser removido.
///
/// - **Retorno:**
///   Retorna uma `Future<void>`.
///
/// ### reset
/// Limpa todas as preferÃªncias armazenadas.
///
/// - **Retorno:**
///   Retorna uma `Future<void>`.
///
/// ### save
/// Salva um valor nas preferÃªncias compartilhadas.
///
/// - **ParÃ¢metros:**
///   - [key]: A chave sob a qual o valor serÃ¡ armazenado.
///   - [value]: O valor a ser armazenado.
///
/// - **Retorno:**
///   Retorna uma `Future<void>`.
///
/// ## Exemplo de Uso:
/// ```dart
/// final sharedPref = SharedPref();
/// await sharedPref.save('token', '123456');
/// String? token = await sharedPref.read('token');
/// print(token); // SaÃ­da: '123456'
/// await sharedPref.remove('token');
/// ```
///
/// ## Uso:
/// Esta classe pode ser utilizada em qualquer parte da aplicaÃ§Ã£o onde
/// seja necessÃ¡rio gerenciar preferÃªncias compartilhadas. Ela fornece
/// uma interface simples para armazenar e recuperar dados persistentes.
class SharedPref {
  Future<String?> read(String key) async {
    final preferences = await SharedPreferences.getInstance();
    return preferences.getString(key);
  }

  Future<void> remove(String key) async {
    final preferences = await SharedPreferences.getInstance();
    preferences.remove(key);
  }

  Future<void> reset() async {
    final preferences = await SharedPreferences.getInstance();
    await preferences.clear();
  }

  Future<void> save(String key, String value) async {
    final preferences = await SharedPreferences.getInstance();
    preferences.setString(key, value);
  }
}
