// üê¶ Flutter imports:
import 'package:flutter/material.dart';

// üåé Project imports:
import 'package:modulohu_web/src/components/components.dart';

/// Um widget que exibe um di√°logo de alerta com conte√∫do personaliz√°vel.
///
/// O widget [Alert] √© um widget com estado que apresenta um di√°logo modal
/// com um cabe√ßalho, conte√∫do e um bot√£o de a√ß√£o. Pode ser usado para mostrar
/// mensagens de sucesso ou aviso, juntamente com qualquer conte√∫do personalizado
/// fornecido pelo usu√°rio.
///
/// O di√°logo pode ser configurado para exibir um cabe√ßalho, um t√≠tulo de sucesso ou
/// aviso, e um bot√£o para fechar o di√°logo.
///
/// ## Par√¢metros:
/// - [buttonColor]: A cor do bot√£o de a√ß√£o. O padr√£o √© `Colors.blueAccent`.
/// - [buttonText]: O texto exibido no bot√£o de a√ß√£o. O padr√£o √© `'Fechar'`.
/// - [success]: Um booleano que indica se o alerta √© uma mensagem de sucesso. Se verdadeiro, o t√≠tulo exibir√° "SUCESSO". Se falso, exibir√° "ATEN√á√ÉO".
/// - [header]: Uma string que representa o cabe√ßalho do di√°logo de alerta. Se vazio, um t√≠tulo padr√£o ser√° mostrado com base no par√¢metro [success].
/// - [title]: Um booleano que indica se o cabe√ßalho deve ser exibido como um t√≠tulo. O padr√£o √© `false`.
/// - [isModal]: Um booleano que indica se o di√°logo √© modal. Se verdadeiro, o di√°logo ter√° uma cor de fundo secund√°ria.
/// - [child]: Um widget que representa o conte√∫do principal do di√°logo de alerta. Este √© um par√¢metro obrigat√≥rio.
///
/// ## Exemplo:
/// ```dart
/// Alert(
///   buttonText: 'OK',
///   buttonColor: Colors.green,
///   success: true,
///   header: 'Opera√ß√£o conclu√≠da',
///   isModal: true,
///   child: Text('A opera√ß√£o foi realizada com sucesso!'),
/// )
/// ```
///
/// ## Uso:
/// Este widget pode ser usado em qualquer parte da aplica√ß√£o onde um di√°logo
/// de alerta √© necess√°rio. Ele fornece uma maneira flex√≠vel de exibir mensagens e
/// conte√∫do personalizado para o usu√°rio.
class Alert extends StatefulWidget {
  final Color? buttonColor;
  final String? buttonText;
  final bool? success;
  final String? header;
  final bool? title;
  final bool isModal;
  final Widget child;

  const Alert({
    super.key,
    this.buttonText = 'Fechar',
    this.buttonColor = Colors.blueAccent,
    this.success,
    this.title,
    this.header = '',
    required this.isModal,
    required this.child,
  });

  @override
  State<Alert> createState() => _AlertState();
}

class _AlertState extends State<Alert> {
  final ScrollController scrollController = ScrollController();

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return AlertDialog(
      title: Container(
        decoration: BoxDecoration(
          borderRadius: const BorderRadius.only(topRight: Radius.circular(5), topLeft: Radius.circular(5)),
          color: widget.isModal ? theme.colorScheme.secondary : null,
        ),
        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
        child:
            widget.header!.isEmpty
                ? Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    if (widget.success == true) Text('SUCESSO', style: TextStyle(color: theme.colorScheme.secondary, fontWeight: FontWeight.bold)),
                    if (widget.success == false) Text('ATEN√á√ÉO', style: TextStyle(color: theme.colorScheme.error, fontWeight: FontWeight.bold)),
                    const SizedBox(),
                    if (widget.title == true) CloseButton(onPressed: () => Navigator.pop(context), color: theme.colorScheme.error),
                  ],
                )
                : Text(
                  widget.header!,
                  style: TextStyle(color: widget.isModal ? theme.colorScheme.onSecondary : theme.colorScheme.onSurface),
                  textAlign: widget.isModal ? TextAlign.center : TextAlign.start,
                ),
      ),
      titlePadding: const EdgeInsets.all(8),
      content: Scrollbar(
        controller: scrollController,
        thumbVisibility: true,
        trackVisibility: true,
        radius: Radius.zero,
        interactive: true,
        child: SizedBox(child: SingleChildScrollView(controller: scrollController, child: widget.child)),
      ),
      actions: [
        const Divider(),
        Row(
          mainAxisAlignment: MainAxisAlignment.end,
          children: [
            Button(
              contentColor: theme.colorScheme.onPrimary,
              onPressed: () => Navigator.pop(context),
              buttonColor: widget.buttonColor,
              text: widget.buttonText,
            ),
          ],
        ),
      ],
      surfaceTintColor: theme.colorScheme.surface,
    );
  }

  @override
  void dispose() {
    scrollController.dispose();
    super.dispose();
  }
}
