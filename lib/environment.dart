// ðŸ“¦ Package imports:
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Uma classe para gerenciar variÃ¡veis de ambiente.
///
/// A classe [Environment] fornece mÃ©todos para acessar variÃ¡veis de
/// ambiente definidas em um arquivo `.env`. Isso Ã© Ãºtil para
/// configurar parÃ¢metros da aplicaÃ§Ã£o, como o nome do aplicativo e
/// a URL base da API.
///
/// ## MÃ©todos:
///
/// ### getAppName
/// Retorna o nome do aplicativo definido na variÃ¡vel de ambiente `TITLE`.
///
/// - **Retorno:**
///   Uma `String?` que contÃ©m o nome do aplicativo ou `null` se a
///   variÃ¡vel nÃ£o estiver definida.
///
/// ### getHost
/// Retorna a URL base da API definida na variÃ¡vel de ambiente `BASE_URL`.
///
/// - **Retorno:**
///   Uma `String?` que contÃ©m a URL base ou `null` se a variÃ¡vel
///   nÃ£o estiver definida.
///
/// ## Exemplo de Uso:
/// ```dart
/// String appName = Environment.getAppName() ?? 'Nome PadrÃ£o';
/// String apiUrl = Environment.getHost() ?? 'https://api.exemplo.com';
/// print('App: $appName, API: $apiUrl');
/// ```
///
/// ## Uso:
/// Esta classe pode ser utilizada em qualquer parte da aplicaÃ§Ã£o onde
/// seja necessÃ¡rio acessar variÃ¡veis de configuraÃ§Ã£o. Ela fornece uma
/// maneira centralizada de gerenciar configuraÃ§Ãµes sensÃ­veis e especÃ­ficas
/// do ambiente.
class Environment {
  static String getAppName() => dotenv.get('TITLE', fallback: null);

  static String getHost() => dotenv.get('BASE_URL', fallback: null);
}

final String title = Environment.getAppName();
final String host = Environment.getHost();
